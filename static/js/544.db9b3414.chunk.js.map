{"version":3,"file":"static/js/544.db9b3414.chunk.js","mappings":"2IAwBA,IAtBe,WACb,OACE,gBACEA,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,OAAQ,OACRC,UAAW,UALf,UAQE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,OACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,0GCrBYC,EAAOC,EAAAA,GAAAA,GAAH,wRAaJC,EAAYD,EAAAA,GAAAA,GAAH,kLAMTE,EAAQF,EAAAA,GAAAA,IAAH,6OAYLG,EAAaH,EAAAA,GAAAA,GAAH,0I,SCcvB,EA3CkB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,YAAuD,IAApDC,EAAmD,EAAnDA,GAAIC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eAC3C,OACE,SAACX,EAAD,WACE,UAAC,KAAD,CACEd,MAAO,CAAE0B,eAAgB,OAAQtB,UAAW,UAC5CuB,GAAE,kBAAaN,GACfO,MAAO,CAAEC,KAAMX,GAHjB,WAKE,0BACE,SAACH,EAAD,CACEe,IACER,EAAW,0CAC4BA,GACnC,oIAENS,IAAKR,OAGT,SAACP,EAAD,UAAaO,GAASC,GAAQC,QAhBlBJ,EAoBnB,KAGN,C,yHCUD,UAtCa,WACX,OAA0CW,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAQ,mCAAG,iHAIHC,EAAAA,EAAAA,IACR,6FALW,gBAGHC,EAHG,EAGXC,KAAQD,QAIJE,EAAiBF,EAAQtB,KAAI,kBAAiC,CAClEC,GADiC,EAAGA,GAEpCC,YAFiC,EAAOA,YAGxCC,MAHiC,EAAoBA,MAApB,IAKnCW,EAAiBU,GAZJ,gDAcbN,GAAW,GAdE,yBAgBbF,GAAa,GAhBA,4EAAH,qDAmBdI,GACD,GAAE,KAGD,gCACGL,IAAa,SAAC,IAAD,IACbE,IAAW,uBAAG,oCACdJ,EAAcY,OAAS,IAAK,SAAC,IAAD,CAAW5B,OAAQgB,MAGrD,C","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import { Circles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        margin: 'auto',\n        textAlign: 'center',\n      }}\n    >\n      <Circles\n        height=\"80\"\n        width=\"80\"\n        color=\"blue\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 540px;\n  object-fit: cover;\n  background-size: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const MovieTitle = styled.h2`\n  font-family: 'Arial';\n  font-style: normal;\n  font-weight: 700;\n  text-decoration: none;\n  color: #000000;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { List, MovieItem, Image, MovieTitle } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, poster_path, title, name, original_title }) => {\n        return (\n          <MovieItem key={id}>\n            <Link\n              style={{ textDecoration: 'none', textAlign: 'center' }}\n              to={`/movies/${id}`}\n              state={{ from: location }}\n            >\n              <div>\n                <Image\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                      : 'https://st2.depositphotos.com/4323461/9818/v/450/depositphotos_98187808-stock-illustration-oops-problem-man-business-concept.jpg}'\n                  }\n                  alt={title}\n                />\n              </div>\n              <MovieTitle>{title || name || original_title}</MovieTitle>\n            </Link>\n          </MovieItem>\n        );\n      })}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      name: PropTypes.string,\n      original_title: PropTypes.string,\n    }).isRequired\n  ),\n};\n\nexport default MovieList;\n","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Home = () => {\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchFoo = async () => {\n      try {\n        const {\n          data: { results },\n        } = await axios.get(\n          'https://api.themoviedb.org/3/trending/movie/week?api_key=ac5224eaea5eecab8d1620632b5b6c95'\n        );\n        const filteredMovies = results.map(({ id, poster_path, title }) => ({\n          id,\n          poster_path,\n          title,\n        }));\n        setPopularMovies(filteredMovies);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFoo();\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {isError && <p>Oops... Something went wrong...</p>}\n      {popularMovies.length > 0 && <MovieList movies={popularMovies} />}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["style","display","alignItems","margin","textAlign","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","List","styled","MovieItem","Image","MovieTitle","movies","location","useLocation","map","id","poster_path","title","name","original_title","textDecoration","to","state","from","src","alt","useState","popularMovies","setPopularMovies","isLoading","setIsLoading","isError","setIsError","useEffect","fetchFoo","axios","results","data","filteredMovies","length"],"sourceRoot":""}