{"version":3,"file":"static/js/691.a8ecf52f.chunk.js","mappings":"2IAwBA,IAtBe,WACb,OACE,gBACEA,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,OAAQ,OACRC,UAAW,UALf,UAQE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,OACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,0GCrBYC,EAAOC,EAAAA,GAAAA,GAAH,wRAaJC,EAAYD,EAAAA,GAAAA,GAAH,kLAMTE,EAAQF,EAAAA,GAAAA,IAAH,6OAYLG,EAAaH,EAAAA,GAAAA,GAAH,0I,SCcvB,EA3CkB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,YAAuD,IAApDC,EAAmD,EAAnDA,GAAIC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eAC3C,OACE,SAACX,EAAD,WACE,UAAC,KAAD,CACEd,MAAO,CAAE0B,eAAgB,OAAQtB,UAAW,UAC5CuB,GAAE,kBAAaN,GACfO,MAAO,CAAEC,KAAMX,GAHjB,WAKE,0BACE,SAACH,EAAD,CACEe,IACER,EAAW,0CAC4BA,GACnC,oIAENS,IAAKR,OAGT,SAACP,EAAD,UAAaO,GAASC,GAAQC,QAhBlBJ,EAoBnB,KAGN,C,oMC/BYW,EAAanB,EAAAA,GAAAA,KAAH,yNAYVoB,EAAMpB,EAAAA,GAAAA,OAAH,gVAiBHqB,EAAkBrB,EAAAA,GAAAA,MAAH,2PAefsB,EAAUtB,EAAAA,GAAAA,KAAH,+M,mBCqDpB,EA3Fe,WACb,OAAsCuB,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA8BN,EAAAA,EAAAA,WAAS,GAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAwBF,EAAaG,IAAI,UAE/CC,EAAAA,EAAAA,YAAU,WACR,GAA8B,OAA1BF,EAAJ,CAGAN,GAAa,GACb,IAAMS,EAAQ,mCAAG,WAAMC,GAAN,oGAIHC,EAAAA,EAAAA,IAAA,0DAC2CL,EAD3C,8CAJG,iBAGHM,EAHG,EAGXC,KAAQD,SAIGE,QACXC,IAAAA,OAAAA,QAAwB,sBAEpBC,EAAiBJ,EAAQlC,KAAI,kBAAiC,CAClEC,GADiC,EAAGA,GAEpCC,YAFiC,EAAOA,YAGxCC,MAHiC,EAAoBA,MAApB,IAKnCiB,EAAiBkB,GAfJ,kDAiBbd,GAAW,GAjBE,yBAmBbF,GAAa,GAnBA,6EAAH,sDAsBdS,EAASH,EAxBR,CAyBF,GAAE,CAACA,EAAuBF,IAgB3B,OACE,iCACE,0BACE,UAACd,EAAD,CAAY2B,SAbG,SAAAC,GAGnB,GAFAA,EAAEC,kBAEGxB,EACH,OAAOoB,IAAAA,OAAAA,QAAwB,kBAEjCV,EAAgB,CAAEe,MAAOzB,IACzBC,EAAe,GAChB,EAKK,WACE,UAACL,EAAD,CAAK8B,KAAK,SAAV,WACE,gBACEC,OAAO,OACPC,KAAK,OACLC,YAAY,IACZC,QAAQ,cACR9D,OAAO,OACPC,MAAM,OACN8D,MAAM,6BAPR,UASE,iBAAMC,EAAE,6RAEV,SAAClC,EAAD,UAAS,eAGX,SAACD,EAAD,CACEoC,MAAOjC,EACPkC,SAnCW,SAAAX,GACnBtB,EAAesB,EAAEY,OAAOF,MAAMG,cAAcC,OAC7C,EAkCSX,KAAK,OACLvC,KAAK,SACLmD,aAAa,MACbC,WAAS,EACTC,YAAY,wBAIlB,2BACGpC,IAAa,SAACqC,EAAA,EAAD,IACbnC,IAAW,uBAAG,oCACdJ,EAAciB,OAAS,IAAK,SAACuB,EAAA,EAAD,CAAW9D,OAAQsB,SAIvD,C","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import { Circles } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        margin: 'auto',\n        textAlign: 'center',\n      }}\n    >\n      <Circles\n        height=\"80\"\n        width=\"80\"\n        color=\"blue\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 540px;\n  object-fit: cover;\n  background-size: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: pointer;\n  }\n`;\n\nexport const MovieTitle = styled.h2`\n  font-family: 'Arial';\n  font-style: normal;\n  font-weight: 700;\n  text-decoration: none;\n  color: #000000;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { List, MovieItem, Image, MovieTitle } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, poster_path, title, name, original_title }) => {\n        return (\n          <MovieItem key={id}>\n            <Link\n              style={{ textDecoration: 'none', textAlign: 'center' }}\n              to={`/movies/${id}`}\n              state={{ from: location }}\n            >\n              <div>\n                <Image\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                      : 'https://st2.depositphotos.com/4323461/9818/v/450/depositphotos_98187808-stock-illustration-oops-problem-man-business-concept.jpg}'\n                  }\n                  alt={title}\n                />\n              </div>\n              <MovieTitle>{title || name || original_title}</MovieTitle>\n            </Link>\n          </MovieItem>\n        );\n      })}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      name: PropTypes.string,\n      original_title: PropTypes.string,\n    }).isRequired\n  ),\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin: 0 40px;\n  margin-bottom: 40px;\n`;\n\nexport const Btn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const BtnText = styled.span`\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\nimport Loader from 'components/Loader/Loader';\nimport { SearchForm, SearchFormInput, Btn, BtnText } from './Movies.styled';\nimport MovieList from 'components/MovieList/MovieList.jsx';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [foundedMovies, setFoundedMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryFromSearchParams = searchParams.get('query');\n\n  useEffect(() => {\n    if (queryFromSearchParams === null) {\n      return;\n    }\n    setIsLoading(true);\n    const fetchFoo = async searchWord => {\n      try {\n        const {\n          data: { results },\n        } = await axios.get(\n          `https://api.themoviedb.org/3/search/movie?query=${queryFromSearchParams}&api_key=ac5224eaea5eecab8d1620632b5b6c95`\n        );\n        if (!results.length) {\n          Notiflix.Notify.warning('There is no movies');\n        }\n        const filteredMovies = results.map(({ id, poster_path, title }) => ({\n          id,\n          poster_path,\n          title,\n        }));\n        setFoundedMovies(filteredMovies);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchFoo(queryFromSearchParams);\n  }, [queryFromSearchParams, searchParams]);\n\n  const handleChange = e => {\n    setSearchQuery(e.target.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!searchQuery) {\n      return Notiflix.Notify.warning('Type something');\n    }\n    setSearchParams({ query: searchQuery });\n    setSearchQuery('');\n  };\n\n  return (\n    <>\n      <div>\n        <SearchForm onSubmit={handleSubmit}>\n          <Btn type=\"submit\">\n            <svg\n              stroke=\"#000\"\n              fill=\"#000\"\n              strokeWidth=\"0\"\n              viewBox=\"0 0 448 512\"\n              height=\"12px\"\n              width=\"12px\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M448 449L301.2 300.2c20-27.9 31.9-62.2 31.9-99.2 0-93.1-74.7-168.9-166.5-168.9C74.7 32 0 107.8 0 200.9s74.7 168.9 166.5 168.9c39.8 0 76.3-14.2 105-37.9l146 148.1 30.5-31zM166.5 330.8c-70.6 0-128.1-58.3-128.1-129.9S95.9 71 166.5 71s128.1 58.3 128.1 129.9-57.4 129.9-128.1 129.9z\"></path>\n            </svg>\n            <BtnText>Search</BtnText>\n          </Btn>\n\n          <SearchFormInput\n            value={searchQuery}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"search\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n        </SearchForm>\n      </div>\n      <div>\n        {isLoading && <Loader />}\n        {isError && <p>Oops... Something went wrong...</p>}\n        {foundedMovies.length > 0 && <MovieList movies={foundedMovies} />}\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["style","display","alignItems","margin","textAlign","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","List","styled","MovieItem","Image","MovieTitle","movies","location","useLocation","map","id","poster_path","title","name","original_title","textDecoration","to","state","from","src","alt","SearchForm","Btn","SearchFormInput","BtnText","useState","searchQuery","setSearchQuery","foundedMovies","setFoundedMovies","isLoading","setIsLoading","isError","setIsError","useSearchParams","searchParams","setSearchParams","queryFromSearchParams","get","useEffect","fetchFoo","searchWord","axios","results","data","length","Notiflix","filteredMovies","onSubmit","e","preventDefault","query","type","stroke","fill","strokeWidth","viewBox","xmlns","d","value","onChange","target","toLowerCase","trim","autoComplete","autoFocus","placeholder","Loader","MovieList"],"sourceRoot":""}